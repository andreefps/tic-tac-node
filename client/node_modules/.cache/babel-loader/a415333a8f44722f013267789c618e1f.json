{"ast":null,"code":"var _jsxFileName = \"/home/possiedi/dev/tic-tac-node/client/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [board, setBoard] = useState(null);\n  const [isPlayerOneTurn, setIsPlayerOneTurn] = useState(true);\n  const [matchingTiles, setMatchingTiles] = useState([]);\n  const [gameStarted, setGameStarted] = useState(false);\n  useEffect(() => {\n    if (board && board.gameOver) {\n      setMatchingTiles(board.matchingTiles);\n    }\n  }, [board]);\n\n  async function fetchGame(id) {\n    if (!id) {\n      const {\n        data\n      } = await axios.post(\"http://localhost:3001/game\");\n      return setBoard(data);\n    }\n\n    const {\n      data\n    } = await axios.post(`http://localhost:3001/game/${board.id}`);\n    return setBoard(data);\n  }\n\n  async function handlePlay(tileIndex) {\n    if (board && !board.gameOver) {\n      const {\n        data\n      } = await axios.post(`http://localhost:3001/play${board.id}&${tileIndex}&${isPlayerOneTurn ? \"X\" : \"O\"}`);\n      setBoard(data);\n\n      if (!data.gameOver) {\n        setIsPlayerOneTurn(!isPlayerOneTurn);\n      }\n    }\n  }\n\n  function handleNewGame() {\n    fetchGame();\n    setMatchingTiles([]);\n    setGameStarted(true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"newGameButton\",\n        onClick: () => handleNewGame(),\n        children: \"New game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), gameStarted && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"game-board\",\n          children: board && board.tiles.map((tile, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => handlePlay(index),\n            className: matchingTiles.includes(index) ? \"matchingTile box\" : \"box\",\n            children: tile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), board && board.gameOver && /*#__PURE__*/_jsxDEV(\"strong\", {\n          className: \"winMessage\",\n          children: [\"Player \", isPlayerOneTurn ? \"1\" : \"2\", \" won !\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"9tNVIsIItiT2Fq7bnhHIdXg7Xzk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","App","board","setBoard","isPlayerOneTurn","setIsPlayerOneTurn","matchingTiles","setMatchingTiles","gameStarted","setGameStarted","gameOver","fetchGame","id","data","post","handlePlay","tileIndex","handleNewGame","tiles","map","tile","index","includes"],"sources":["/home/possiedi/dev/tic-tac-node/client/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [board, setBoard] = useState(null);\n  const [isPlayerOneTurn, setIsPlayerOneTurn] = useState(true);\n  const [matchingTiles, setMatchingTiles] = useState([]);\n  const [gameStarted, setGameStarted] = useState(false);\n\n  useEffect(() => {\n    if (board && board.gameOver) {\n      setMatchingTiles(board.matchingTiles);\n    }\n  }, [board]);\n\n  async function fetchGame(id) {\n    if (!id) {\n      const { data } = await axios.post(\"http://localhost:3001/game\");\n      return setBoard(data);\n    }\n    const { data } = await axios.post(`http://localhost:3001/game/${board.id}`);\n    return setBoard(data);\n  }\n\n  async function handlePlay(tileIndex) {\n    if (board && !board.gameOver) {\n      const { data } = await axios.post(\n        `http://localhost:3001/play${board.id}&${tileIndex}&${\n          isPlayerOneTurn ? \"X\" : \"O\"\n        }`\n      );\n      setBoard(data);\n      if (!data.gameOver) {\n        setIsPlayerOneTurn(!isPlayerOneTurn);\n      }\n    }\n  }\n\n  function handleNewGame() {\n    fetchGame();\n    setMatchingTiles([]);\n    setGameStarted(true);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <a className=\"newGameButton\" onClick={() => handleNewGame()}>\n          New game\n        </a>\n        {gameStarted && (\n          <div>\n            <div class=\"game-board\">\n              {board &&\n                board.tiles.map((tile, index) => (\n                  <div\n                    onClick={() => handlePlay(index)}\n                    className={\n                      matchingTiles.includes(index) ? \"matchingTile box\" : \"box\"\n                    }\n                  >\n                    {tile}\n                  </div>\n                ))}\n            </div>\n            {board && board.gameOver && (\n              <strong className={\"winMessage\"}>\n                Player {isPlayerOneTurn ? \"1\" : \"2\"} won !\n              </strong>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,IAAD,CAAlC;EACA,MAAM,CAACK,eAAD,EAAkBC,kBAAlB,IAAwCN,QAAQ,CAAC,IAAD,CAAtD;EACA,MAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,EAAD,CAAlD;EACA,MAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,KAAD,CAA9C;EAEAD,SAAS,CAAC,MAAM;IACd,IAAII,KAAK,IAAIA,KAAK,CAACQ,QAAnB,EAA6B;MAC3BH,gBAAgB,CAACL,KAAK,CAACI,aAAP,CAAhB;IACD;EACF,CAJQ,EAIN,CAACJ,KAAD,CAJM,CAAT;;EAMA,eAAeS,SAAf,CAAyBC,EAAzB,EAA6B;IAC3B,IAAI,CAACA,EAAL,EAAS;MACP,MAAM;QAAEC;MAAF,IAAW,MAAMb,KAAK,CAACc,IAAN,CAAW,4BAAX,CAAvB;MACA,OAAOX,QAAQ,CAACU,IAAD,CAAf;IACD;;IACD,MAAM;MAAEA;IAAF,IAAW,MAAMb,KAAK,CAACc,IAAN,CAAY,8BAA6BZ,KAAK,CAACU,EAAG,EAAlD,CAAvB;IACA,OAAOT,QAAQ,CAACU,IAAD,CAAf;EACD;;EAED,eAAeE,UAAf,CAA0BC,SAA1B,EAAqC;IACnC,IAAId,KAAK,IAAI,CAACA,KAAK,CAACQ,QAApB,EAA8B;MAC5B,MAAM;QAAEG;MAAF,IAAW,MAAMb,KAAK,CAACc,IAAN,CACpB,6BAA4BZ,KAAK,CAACU,EAAG,IAAGI,SAAU,IACjDZ,eAAe,GAAG,GAAH,GAAS,GACzB,EAHoB,CAAvB;MAKAD,QAAQ,CAACU,IAAD,CAAR;;MACA,IAAI,CAACA,IAAI,CAACH,QAAV,EAAoB;QAClBL,kBAAkB,CAAC,CAACD,eAAF,CAAlB;MACD;IACF;EACF;;EAED,SAASa,aAAT,GAAyB;IACvBN,SAAS;IACTJ,gBAAgB,CAAC,EAAD,CAAhB;IACAE,cAAc,CAAC,IAAD,CAAd;EACD;;EAED,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,uBACE;MAAK,SAAS,EAAC,WAAf;MAAA,wBACE;QAAG,SAAS,EAAC,eAAb;QAA6B,OAAO,EAAE,MAAMQ,aAAa,EAAzD;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,EAIGT,WAAW,iBACV;QAAA,wBACE;UAAK,KAAK,EAAC,YAAX;UAAA,UACGN,KAAK,IACJA,KAAK,CAACgB,KAAN,CAAYC,GAAZ,CAAgB,CAACC,IAAD,EAAOC,KAAP,kBACd;YACE,OAAO,EAAE,MAAMN,UAAU,CAACM,KAAD,CAD3B;YAEE,SAAS,EACPf,aAAa,CAACgB,QAAd,CAAuBD,KAAvB,IAAgC,kBAAhC,GAAqD,KAHzD;YAAA,UAMGD;UANH;YAAA;YAAA;YAAA;UAAA,QADF;QAFJ;UAAA;UAAA;UAAA;QAAA,QADF,EAcGlB,KAAK,IAAIA,KAAK,CAACQ,QAAf,iBACC;UAAQ,SAAS,EAAE,YAAnB;UAAA,sBACUN,eAAe,GAAG,GAAH,GAAS,GADlC;QAAA;UAAA;UAAA;UAAA;QAAA,QAfJ;MAAA;QAAA;QAAA;QAAA;MAAA,QALJ;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AA+BD;;GAxEQH,G;;KAAAA,G;AA0ET,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}